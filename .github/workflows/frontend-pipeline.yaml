name: Frontend CI Pipeline

on:
  # Trigger manually or when changes are made to the Dockerfile folder
  workflow_dispatch:  # Manual trigger
  push:  # Trigger when changes are made in the specified folder
    branches:
            - main
    # paths:
    #         - src/frontend/**  # Adjust to match the path to your Dockerfile

env:
  SERVICE_NAME: frontend
  DOCKERHUB_IMAGE_TAG: kappu1512/frontend  # Replace with your Docker Hub repository
#   SONARQUBE_SERVER_URL: http://<x.x.x.x:9000>  # SonarQube server URL
#   PATH: /opt/sonar-scanner/sonar-scanner-4.8.0.2856-linux/bin:${{ env.PATH }} # Specify Path for Sonar Scanner Installation

jobs:
  build-and-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

    #   # SonarQube Scan
    #   - name: SonarQube Analysis
    #     env:
    #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #     run: |
    #       sonar-scanner \
    #         -Dsonar.projectKey=${{ env.SERVICE_NAME }} \
    #         -Dsonar.sources=src/frontend \
    #         -Dsonar.host.url=${{ env.SONARQUBE_SERVER_URL }} \
    #         -Dsonar.login=${{ secrets.SONAR_TOKEN }}

      # Install Trivy
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          sudo mv ./bin/trivy /usr/local/bin/

      # Build the Docker image
      - name: Build Docker Image
        run: |
          docker build -t ${{ env.SERVICE_NAME }}:latest -f src/frontend/Dockerfile src/frontend
          docker images  # Log the images on the runner

      # Scan the Docker image for vulnerabilities using Trivy
      - name: Trivy Scan for Docker Image
        run: |
          trivy image --severity HIGH,CRITICAL --exit-code 1 --scanners vuln ${{ env.SERVICE_NAME }}:latest || true

  push-to-dockerhub:
    needs: build-and-scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the code (needed to ensure context availability)
      - name: Checkout Code
        uses: actions/checkout@v3

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin

      # Tag and push the Docker image to Docker Hub
    #   - name: Push Docker Image
    #     run: |
    #       docker images
    #       docker tag ${{ env.SERVICE_NAME }}:latest ${{ env.DOCKERHUB_IMAGE_TAG }}:${{ github.run_number }}
    #       docker push ${{ env.DOCKERHUB_IMAGE_TAG }}:${{ github.run_number }}

      - name: Push Docker Image
        run: |
            docker tag docker.io/library/${{ env.SERVICE_NAME }}:latest ${{ env.DOCKERHUB_IMAGE_TAG }}:${{ github.run_number }}
            docker push ${{ env.DOCKERHUB_IMAGE_TAG }}:${{ github.run_number }}
  